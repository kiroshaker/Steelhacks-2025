# rxcast_demand_forecast_xgb_full.py
# Train XGBoost with lag features and generate multiple forecast plots

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error, root_mean_squared_error
import xgboost as xgb

# -------------------------------
# 1. Load dataset
# -------------------------------
df = pd.read_csv("fabricated_pharmacy_dataset_year_updated.csv")

# Combine date + time into a single timestamp
df["timestamp"] = pd.to_datetime(df["date"] + " " + df["time"])
df = df.sort_values("timestamp")

# -------------------------------
# 2. Feature Engineering
# -------------------------------
df["dayofweek"] = df["timestamp"].dt.dayofweek
df["hour"] = df["timestamp"].dt.hour
df["month"] = df["timestamp"].dt.month

# One-hot encode categorical variables
df = pd.get_dummies(df, columns=["weather", "season"], drop_first=True)

# Add lag features (previous 1, 7, 14 steps)
for lag in [1, 7, 14]:
    df[f"lag_{lag}"] = df["qty.dispensed"].shift(lag)

# Drop rows with NaNs created by lagging
df = df.dropna().reset_index(drop=True)

# -------------------------------
# 3. Train/Test Split
# -------------------------------
X = df.drop(columns=["qty.dispensed","date","time","timestamp"])
y = df["qty.dispensed"]

split_index = int(len(df) * 0.8)
X_train, X_test = X.iloc[:split_index], X.iloc[split_index:]
y_train, y_test = y.iloc[:split_index], y.iloc[split_index:]
time_test = df["timestamp"].iloc[split_index:]

# -------------------------------
# 4. Train XGBoost Model
# -------------------------------
xgb_model = xgb.XGBRegressor(
    n_estimators=500,
    learning_rate=0.05,
    max_depth=6,
    subsample=0.8,
    colsample_bytree=0.8,
    objective="reg:squarederror",
    random_state=42,
    n_jobs=-1
)

xgb_model.fit(X_train, y_train)

# -------------------------------
# 5. Evaluate One-Step Predictions
# -------------------------------
preds = xgb_model.predict(X_test)

mae = mean_absolute_error(y_test, preds)
rmse = root_mean_squared_error(y_test, preds)

print(f"XGBoost MAE: {mae:.2f}")
print(f"XGBoost RMSE: {rmse:.2f}")

# -------------------------------
# 6A. Plot Results (Test Period ~ Last 2 Months)
# -------------------------------
plt.figure(figsize=(12,6))
plt.plot(time_test, y_test.values, label="Actual (Test)", color="blue")
plt.plot(time_test, preds, label="Predicted (Test)", color="orange", alpha=0.7)
plt.xlabel("Date")
plt.ylabel("Qty Dispensed")
plt.title("XGBoost Forecast: Test Period (Last 20% of Year ~ 2 Months)")
plt.legend()
plt.tight_layout()
plt.show()

# -------------------------------
# 6B. Plot Results (Full Year)
# -------------------------------
all_preds = xgb_model.predict(X)

plt.figure(figsize=(14,6))
plt.plot(df["timestamp"], y, label="Actual (Full Year)", color="blue")
plt.plot(df["timestamp"], all_preds, label="Predicted (Full Year)", color="red", alpha=0.6)
plt.xlabel("Date")
plt.ylabel("Qty Dispensed")
plt.title("XGBoost Forecast: Full Year (2024)")
plt.legend()
plt.tight_layout()
plt.show()

# -------------------------------
# 7. Feature Importance
# -------------------------------
xgb.plot_importance(xgb_model, max_num_features=12, height=0.5)
plt.title("Feature Importance")
plt.show()

# -------------------------------
# 8. Build Future Exogenous Frame (repeat last 7 days)
# -------------------------------
steps = 28  # 7 days * 4 steps/day
exog_future = df.tail(steps).copy()

# advance timestamps into the future
exog_future["timestamp"] = pd.date_range(
    start=df["timestamp"].iloc[-1] + pd.Timedelta(hours=6),
    periods=steps, freq="6H"
)
exog_future["date"] = exog_future["timestamp"].dt.strftime("%Y-%m-%d")
exog_future["time"] = exog_future["timestamp"].dt.strftime("%H:%M")
exog_future["dayofweek"] = exog_future["timestamp"].dt.dayofweek
exog_future["hour"] = exog_future["timestamp"].dt.hour
exog_future["month"] = exog_future["timestamp"].dt.month

# placeholder lags
for lag in [1, 7, 14]:
    exog_future[f"lag_{lag}"] = np.nan

feature_cols = X.columns  # keep training feature order

# -------------------------------
# 9. Recursive Forecast Function
# -------------------------------
def forecast_multi_step_with_exog(model, hist_df, future_exog, feature_cols):
    last_known = hist_df.copy()
    preds = []

    for i in range(len(future_exog)):
        row = future_exog.iloc[[i]].copy()

        # fill lag features
        for lag in [1, 7, 14]:
            row[f"lag_{lag}"] = last_known["qty.dispensed"].iloc[-lag]

        # align with training features
        X_row = row.reindex(columns=feature_cols, fill_value=0)

        y_pred = model.predict(X_row)[0]
        preds.append(y_pred)

        # update last_known
        full_row = row.copy()
        full_row["qty.dispensed"] = y_pred
        last_known = pd.concat([last_known, full_row[last_known.columns]], ignore_index=True)

    return np.array(preds)

# 6-hourly forecasts
step_forecasts = forecast_multi_step_with_exog(
    xgb_model, df.copy(), exog_future.copy(), feature_cols
)

# convert 6-hourly â†’ daily totals
daily_forecasts = step_forecasts.reshape(-1, 4).sum(axis=1)

print("\n7-Day Forecast (Daily Totals):")
for i, val in enumerate(daily_forecasts, 1):
    print(f"Day +{i}: {val:.1f}")

# -------------------------------
# 10. Plot Actual vs Forecast (Daily Totals)
# -------------------------------
# actual daily totals (last 14 days)
last_14d = df.loc[df["timestamp"] >= df["timestamp"].max() - pd.Timedelta(days=14)].copy()
last_14d["date_only"] = last_14d["timestamp"].dt.date
actual_daily = (last_14d.groupby("date_only")["qty.dispensed"]
                .sum()
                .reset_index())
actual_daily["date_only"] = pd.to_datetime(actual_daily["date_only"])

# forecast dates
future_days = pd.date_range(
    start=actual_daily["date_only"].max() + pd.Timedelta(days=1),
    periods=7, freq="D"
)

# plot
plt.figure(figsize=(12,6))
plt.plot(actual_daily["date_only"], actual_daily["qty.dispensed"],
         label="Actual (Daily Totals, last 14 days)", color="blue")
plt.plot(future_days, daily_forecasts, "ro-", label="7-Day Forecast (Daily Totals)")
plt.xlabel("Date")
plt.ylabel("Qty Dispensed (per day)")
plt.title("7-Day Forecast (Daily Totals) with XGBoost + Lag Features")
plt.legend()
plt.tight_layout()
plt.show()

# -------------------------------